# tiff_preprocessor/cli.py

"""
TIFF Preprocessor CLI

Processes multi-channel, multi-timepoint TIFF image stacks into tiled WebP volumes
with contrast stretching options.

Usage:
  cli.py [--input=<folder>] [--output=<folder>] [--stretch=<mode>] [--threads=<n>] [--dry-run] [--debug] [--global-contrast]
  cli.py (-h | --help)
  cli.py --version

Options:
  -h --help               Show this screen.
  --version               Show version and exit.
  --input=<folder>        Input folder containing TIFF files (e.g., *_chN_stackNNNN*.tif).
                          [default: ./Input_TIFFs]
  --output=<folder>       Output folder for WebP volumes and manifest.json.
                          [default: ./volumes]
  --stretch=<mode>        Contrast stretch method: smart | smart-late | imagej-auto | max
                          [default: smart-late]
  --global-contrast       Apply contrast range calculated globally across all timepoints
                          for each channel, instead of per-timepoint.
  --threads=<n>           Number of worker threads for parallel processing.
                          [default: 8]
  --dry-run               Simulate the process without reading/writing image files.
                          Checks file parsing and layout determination.
  --debug                 Enable detailed debug logging and save intermediate debug images
                          (histograms, preview slices). Overrides default logging level.

"""

import logging
import sys
import warnings
from typing import Any, Dict

from docopt import docopt

# Assuming core.py is in the same package directory
from .core import run_preprocessing

# Define App Version
APP_VERSION = "TIFF Preprocessor 1.1" # Updated version example

# Configure logging (moved from core.py)
log = logging.getLogger(__name__) # Get logger for this module


def main():
    """
    Command-line interface main function.
    Parses arguments, sets up logging, and calls the core processing function.
    """
    # Suppress SyntaxWarning potentially generated by docopt on newer Python versions
    # regarding invalid escape sequences in docstrings. Remove if not needed.
    warnings.filterwarnings("ignore", category=SyntaxWarning, module="docopt")

    # Parse arguments using docopt based on the module's docstring (__doc__)
    args: Dict[str, Any] = docopt(__doc__, version=APP_VERSION)

    # --- Setup Logging ---
    log_level = logging.DEBUG if args.get("--debug") else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S' # Added timestamp and logger name
    )
    # Suppress excessive logging from specific libraries if needed
    # logging.getLogger("tifffile").setLevel(logging.WARNING)

    log.debug(f"Arguments received: {args}") # Log parsed args if debugging

    # --- Run Core Processing ---
    try:
        run_preprocessing(args)
        log.info("✅ Preprocessing finished successfully.")
        sys.exit(0) # Explicitly exit with success code
    except FileNotFoundError as e:
        log.error(f"❌ Input folder not found: {e}")
        sys.exit(1) # Exit with error code
    except ValueError as e:
         log.error(f"❌ Invalid configuration or data error: {e}")
         sys.exit(1)
    except Exception as e:
        # Catch any other unexpected errors from the core logic
        log.critical(f"❌ An unexpected critical error occurred: {e}", exc_info=True) # Log stack trace
        sys.exit(1)

# Standard Python entry point guard
if __name__ == "__main__":
    main()